#!/bin/bash

cachedir=~/.cache/media-art # Location of Banshee album art cache
tmpdir=/tmp/banshee-wrapper # Should never contain more than one file

# Accepts a valid Banshee query type, returns the trimmed result
trimQuery() # query
{
  query="$1"

  str="$(banshee --query-$query)"
  result="${str#$query: }" # How put above line in place of str?

  printf "%s" "$result"
}

getState()
{
  state="$(trimQuery current-state)"

  stateStr="["
  if [[ $state == "playing" ]]; then
    stateStr+="▶"
  elif [[ $state == "paused" ]]; then
    stateStr+="Ⅱ"
  elif [[ $state == "idle" ]]; then
    stateStr+="◼"
  else
    stateStr+="?"
  fi
  stateStr+="]"

  printf "%s" "$stateStr"
}

getRating()
{
  rating="$(trimQuery rating)"

  if [[ $rating == "" ]]; then
    rating="0"
  fi

  printf "%s" $rating
}

getRatingStars()
{
  rating="$(getRating)"

  starsStr=""
  i=0
  while [[ $i < $rating ]]; do
    starsStr+="★"
    let i+=1
  done

  while [[ $i < 5 ]]; do
    starsStr+="☆"
    let i+=1
  done
  printf "%s" "$starsStr"
}

# Accepts a string of the form "x","+x", or "-x" and either sets this to the new rating or adds this to the existing rating
setRating() # usrVal
{
  usrVal="$1"

  oldRating="$(getRating)"

  if [[ ${usrVal:0:1} == "+" || ${usrVal:0:1} == "-" ]]; then
    let newRating=oldRating+usrVal
  else
    newRating=usrVal
  fi

  banshee --set-rating=$newRating
}

getArt()
{
  # Build the name that Banshee would have used if it had cached the art of the current album
  albumHash="$(printf "%s\t%s" "$(trimQuery artist)" "$(trimQuery album)" | md5sum | cut -b1-32)"
  artFilename="album-$albumHash.jpg"

  # If Banshee has cached this art, get it and use it
  if [[ -e "$cachedir/$artFilename" ]]; then
    printf "%s" "$cachedir/$artFilename"
  # else # Employ fallback solution
  #   getArtOld
  fi
}

# Deprecation candidate, may be removed in future releases
# This is the only function dependent on tmpdir defined at top
getArtOld()
{
  # Existing art is whatever is in tmpdir
  if [[ -e "$tmpdir" ]]; then
    oldArt="$(ls "$tmpdir")"
  else
    mkdir "$tmpdir"
    oldArt=""
  fi

  # Build the name that art extracted from the source file would have
  fullpath="$(python -c 'import gio,sys; print(gio.File(sys.argv[1]).get_path())' $(trimQuery uri) )" # Important: no quotes around the trimQuery uri arg to python
  newArt="$(basename "$fullpath" | sed "s/,/_/g")" # notify-send bug #674642: Doesn't show icon if path contains a comma, so replace with underscore
  newArt="${newArt%.*}.png" # Remove shortest match of ".*" and append ".png"

  # Check against existing art, to see if song has not changed
  if [[ "$oldArt" == "$newArt" ]]; then
    printf "%s" "$tmpdir/$oldArt"
  else # Song has changed
    # Delete old art
    if [[ "$oldArt" != "" ]]; then
      rm -f "$tmpdir/$oldArt"
    fi

    # Try get new art
    ffmpeg -i "$fullpath" "$tmpdir/$newArt"

    # Check if extraction successful
    if [[ -e "$tmpdir/$newArt" ]]; then
      printf "%s" "$tmpdir/$newArt"
    else # No art stored in source file
      printf "%s" "media-player-banshee" # Stock Banshee icon
    fi
  fi
}

getTrackDisc()
{
  # Banshee bug (?): query-disc always returns empty string, even when disc number and count fields are set
  # This code written assuming query-disc may return a valid nonempty string

  trackNumber="$(trimQuery track-number)"
  trackCount="$(trimQuery track-count)"
  disc="$(trimQuery disc)"

  retStr=""

  if [[ "$trackNumber" != "" ]]; then
    retStr+="("
    retStr+="$trackNumber"
    if [[ "$trackCount" != "" ]]; then
      retStr+="/"
      retStr+="$trackCount"
    fi
    retStr+=")"
  fi
  if [[ "$disc" != "" ]]; then
    retStr+="($disc)"
  fi

  printf "%s" "$retStr"
}

notify()
{
  art="$(getArt)"
  # printf "\n%s\n" "The art filepath is: $art" # debug
  state="$(getState)"
  rating="$(getRatingStars)"
  trackDisc="$(getTrackDisc)"

  title="$(trimQuery title)"

  artist="$(trimQuery artist)"
  album="$(trimQuery album)"
  info="$(printf "%s\n%s" "by $artist" "from $album")"

  notify-send -i "$art" -t 2 -h int:transient:1 "$state $rating $trackDisc $title" "$info"
}

# program
  if [[ "$1" == "-n" ]]; then
    notify
  elif [[ "$1" == "-r" ]]; then
    setRating "$2"
    notify
  fi
# end program